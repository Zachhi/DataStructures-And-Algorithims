#include "structures.h"

using namespace std;
//includes implementation of an arrayList and a doubly linked list
void myLists()     
{
    //-----ARRAYLIST------
    cout << "-----------Array List Implementation-------------" << endl;
    cout << "Creating ArrayList<int> list..." << endl;
    ArrayList<int> intList;

    cout << "Testing size()" << endl;
    cout << intList.size() << endl;

    intList.insert(0,1);
    intList.insert(1,2);
    intList.insert(2,3);
    intList.insert(3,4);
    cout << "After insertion at end, ";
    intList.print();

    intList.insert(3, 200);
    cout << "After insertion at middle, ";
    intList.print();
    intList.insert(0, 100);
    cout << "After insertion at beggining, ";
    intList.print();

    intList.remove(5);
    cout << "After removal at end, ";
    intList.print();
    intList.remove(2);
    cout << "After removal in middle, ";
    intList.print();
    intList.remove(0);
    cout << "After removal at beggining, ";
    intList.print();

    cout << "Testing size()" << endl;
    cout << intList.size() << endl;

    cout << "Testing the [] access: ";
    cout << "list[0] = " << intList[0] << endl;

    ArrayList<int> intList2;
    cout << "testing assignment of List2 to List1: " << endl;
    cout << "List 2: ";
    intList2.print();
    intList2 = intList;
    cout << "List 2 after assignment to List 1: ";
    intList2.print();
    cout << endl;

    //--------DOUBLY LINKED-------
    cout << "--------------Doubly Linked List Implementation-----------------" << endl;
    cout << "Creating DoublyLinkedList<int> list..." << endl;
    DoublyLinkedList<int> list;
    list.insert(0,2);
    list.insert(1,3);
    list.insert(2,5);
    list.insert(0,1);
    list.insert(2,4);
    list.insert(0,2);
    list.insert(1,3);
    list.insert(2,5);
    list.insert(0,1);
    list.insert(2,4);
    cout << "After insertions: " << endl;
    list.print();
    cout << "list size: " << list.size() << endl;
    cout << "list[2] = " << list[2] << endl;
    list.remove(9);
    list.remove(0);
    list.remove(4);
    list.remove(1);
    list.remove(1);
    list.remove(1);
    list.remove(1);
    list.remove(2);
    list.remove(0);
    list.remove(0);
    cout << "after removal: " << endl;
    list.print();
    cout << endl;
}

void myStack()
{
    Stack<int> stak;
    cout << "Creating Stack<int> stack..." << endl;
    stak.push(1);
    stak.push(2);
    stak.push(3);
    cout << "Pushing values 1,2 and 3" << endl;
    cout << "stack.top() = ";
    std::cout << stak.top() << std::endl;
    cout << "stack.pop()" << endl;
    stak.pop();
    cout << "stack.top() = ";
    std::cout << stak.top() << std::endl;
    cout << "stack.pop()" << endl;
    stak.pop();
    cout << "stack.top() = ";
    std::cout << stak.top() << std::endl;
    cout << "Pushing value 29..." << endl;
    stak.push(29);
    cout << "stack.top() = ";
    std::cout << stak.top() << std::endl;

    cout << "Checking assignment with stack2 = stack" << endl;
    Stack<int> stak2 = stak;
    cout << "stack2.top() =";
    std::cout << stak2.top() << std::endl;
    cout << endl;
}

void myQueue()
{
    cout << "Creating Queue<int> q..." << endl;
    Queue<int> q;
    q.enqueue(1);
    q.enqueue(2);
    q.enqueue(3);
    cout << "Queueing values 1, 2, 3 to q..." << endl;
    cout << "q.size() =";
    std::cout << q.size() << std::endl;
    cout << "q.dequeue()" << endl;
    q.dequeue();

    std::cout <<"q.size() =" << q.size() << std::endl;
    std::cout << "q.front() =" << q.front() << std::endl;
    cout << "Queueing value 8..." << endl;
    q.enqueue(8);
    std::cout << "q.front() =" << q.front() << std::endl;
    q.dequeue();
    q.dequeue();
    cout << "q.dequeue()" << endl;
    cout << "q.dequeue()" << endl;
    std::cout << "q.front() =" << q.front() << std::endl;
    cout << endl;
}

void myBST()
{
// make an empty tree
BinarySearchTree<int> tree;
cout << "Creating BinarySearchTree<int> tree" << endl;
cout << "Inserting 6, 4, 2, 8, 20, 3, 1, 0, 100, 5, 18, 16, 6 into tree..." << endl;
// insert values into the tree
tree.insert(6);
tree.insert(4);
tree.insert(2);
tree.insert(8);
tree.insert(20);
tree.insert(3);
tree.insert(1);
tree.insert(0);
tree.insert(100);
tree.insert(5);
tree.insert(18);
tree.insert(16);
tree.insert(6);
cout << "printing:" << endl;
tree.print_tree();
// search the tree
std::cout << "contains 4? " << std::boolalpha << tree.contains(4) << std::endl;
std::cout << "contains 7? " << std::boolalpha << tree.contains(7) << std::endl;

cout << "removing root..." << endl;
// remove the root
tree.remove(6);
cout << "print after removal of root:" << endl;
tree.print_tree();

// find the minimum element
std::cout << "min: " << tree.find_min() << std::endl;

// find the maximum element
std::cout << "max: " << tree.find_max() << std::endl;

cout << "Testing assignment operation and copy constructor" << endl;
cout << "creating tree2 = tree" << endl;
BinarySearchTree<int> tree2;
tree2 = tree;
cout << "printing tree 2" << endl;
tree2.print_tree();
cout << "creating BinarySearchTree<int> tree3(tree2)" << endl;
BinarySearchTree<int> tree3(tree2);
cout << "print tree3" << endl;
tree3.print_tree();

/*
//test for dups
std::cout << "DUPLICATE TESTING" << std::endl;
BinarySearchTree<int> dup;
std::stringstream dupSS;
dup.insert(10);
dup.insert(20);
dup.insert(20);
dup.insert(5);
dup.insert(2);
dup.insert(25);
dup.insert(15);
dup.insert(7);
dup.insert(4);
dup.insert(10);
dup.insert(5);
dup.insert(25);
dup.insert(1);
dup.insert(26);
dup.insert(17);
dup.insert(6);
dup.insert(6);
dup.print_tree(dupSS);
std::cout << dupSS.str() << std::endl;


//test for deletion
std::cout << "----------------------------------" << std::endl;
BinarySearchTree<int> deletionTest;
deletionTest.insert(7);
deletionTest.insert(3);
deletionTest.insert(2);
deletionTest.insert(1);
deletionTest.insert(9);
deletionTest.insert(8);
deletionTest.insert(5);
deletionTest.insert(11);
deletionTest.insert(10);
deletionTest.insert(6);
deletionTest.insert(12);
std::stringstream delSS;
deletionTest.print_tree();
//std::cout << delSS.str() << std::endl;
std::cout << "----------------------------------" << std::endl;
std::stringstream delSS2;
deletionTest.remove(7);
deletionTest.remove(8);
deletionTest.remove(9);
deletionTest.remove(10);
deletionTest.remove(11);
deletionTest.remove(12);
deletionTest.print_tree();
//std::cout << delSS.str() << std::endl;
std::cout << "----------------------------------" << std::endl;
BinarySearchTree<int> deletionTest2;
deletionTest2.insert(5);
deletionTest2.print_tree();
std::cout << "----------------------------------" << std::endl;
deletionTest2.remove(5);
deletionTest2.print_tree();
//testing for mem errors
BinarySearchTree<int> dummy;
dummy.insert(20);
dummy.insert(40);
dummy.insert(30);
dummy.insert(10);
dummy.insert(8);
dummy.insert(15);
dummy.insert(17);
dummy.insert(5);
dummy.insert(6);
dummy.insert(43);
dummy.insert(39);
dummy.insert(31);
dummy.insert(22);
dummy.insert(2);
BinarySearchTree<int> dummy2;
dummy2 = dummy;
BinarySearchTree<int> dummy3(dummy);
dummy.remove(17);
dummy.remove(43);
dummy.remove(2);
dummy.remove(39);
dummy2.remove(17);
dummy2.remove(43);
dummy2.remove(2);
dummy3.remove(17);
dummy3.remove(43);
dummy3.remove(2);
dummy = dummy2;
dummy3 = dummy2;
dummy.remove(5);
dummy.remove(30);
dummy.remove(10);
dummy2.remove(5);
dummy2.remove(30);
dummy2.remove(10);
dummy3.remove(5);
dummy3.remove(30);
dummy3.remove(10);
dummy = dummy;
dummy2 = dummy2;
dummy3 = dummy3;
dummy.remove(22);
dummy.remove(31);
dummy = dummy;
//dummy.makeEmpty();
//dummy2.makeEmpty();
dummy.insert(10);
dummy.insert(105);
dummy.insert(5);
dummy.insert(3);
dummy.insert(50);
dummy.insert(7);
dummy.insert(43);
//dummy.makeEmpty();
std::cout << "----------------------------------" << std::endl;
BinarySearchTree<int> rand;
rand.insert(0);
rand.insert(2);
rand.insert(3);
rand.insert(30);
rand.insert(19);
BinarySearchTree<int> rand2;
rand2=rand;
rand2.print_tree();

BinarySearchTree<std::string> strTest;
strTest.insert("hi");
strTest.insert("lolol");
strTest.insert("ok");
strTest.insert("hio");
strTest.print_tree();
std::cout << "----------------------------------" << std::endl;
strTest.remove("hi");
strTest.remove("lolol");
strTest.print_tree();
*/
cout << endl;
}

void myAVL()
{
    // make an empty tree
    AVLTree<int> tree;
    cout << "Creating AVLTree<int> tree..." << endl;
    // insert 5 values into the tree
    tree.insert(6);
    tree.insert(4);
    tree.insert(2);
    tree.insert(8);
    tree.insert(10);
    cout << "Inserting 6, 4, 2, 8, 10..." << endl;
    cout << "printing tree..." << endl;
    tree.print_tree();
    // search the tree
    std::cout << "contains 4? " << std::boolalpha << tree.contains(4) << std::endl;
    std::cout << "contains 7? " << std::boolalpha << tree.contains(7) << std::endl;

    // remove the root
    cout << "Printing tree after removing root..." << endl;
    tree.remove(4);
    tree.print_tree();

    // find the minimum element
    std::cout << "min: " << tree.find_min() << std::endl;

    // find the maximum element
    std::cout << "max: " << tree.find_max() << std::endl;
    
    cout << "other tests...look at structures.cpp for more info" << endl;
    //DELETION TESTS
    AVLTree<int> del1;
    del1.insert(50);
    del1.insert(75);
    del1.insert(25);
    del1.print_tree();
    del1.remove(50);
    del1.remove(75);
    del1.remove(25);
    del1.print_tree();
    std::cout << "------------------------------- " << std::endl;
    //insert main tests
    AVLTree<int> ins1;
    ins1.insert(50);
    ins1.insert(25);
    ins1.insert(75);
    ins1.insert(10);
    ins1.insert(35);
    ins1.insert(60);
    ins1.insert(90);
    ins1.insert(5);
    ins1.insert(11);
    ins1.print_tree();
    std::cout << "------------------------------- " << std::endl;
    //del on bigger tree
    ins1.remove(90);
    ins1.remove(60);
    ins1.print_tree();
    std::cout << "------------------------------- " << std::endl;
    //rotations test
    AVLTree<int> rot1;
    rot1.insert(5);
    rot1.insert(8);
    rot1.insert(7);
    rot1.print_tree();
    std::cout << "------------------------------- " << std::endl;
    //test from mimir
    AVLTree<int> mim1;
    mim1.insert(7);
    mim1.insert(3);
    mim1.insert(2);
    mim1.insert(1);
    mim1.insert(9);
    mim1.insert(8);
    mim1.insert(5);
    mim1.insert(4);
    mim1.insert(11);
    mim1.insert(10);
    mim1.insert(6);
    mim1.insert(12);
    mim1.print_tree();
    std::cout << "------------------------------- " << std::endl;
    mim1.remove(7);
    mim1.print_tree();
    std::cout << "------------------------------- " << std::endl;
    


    cout << endl;
}

void myRBT()
{
    // TODO(student): write at least 1000 lines of test
    cout << "Creating RedBlackTree<int> test1..." << endl;
    cout << "Inserting 5, 56, 12, 4, 23, 18, 500000" << endl;
    RedBlackTree <int> test1;
    test1.insert(5);
    test1.insert(56);
    test1.insert(12);
    test1.insert(4);
    test1.insert(23);
    test1.insert(18);
    test1.insert(50000);
    cout << "print tree..." << endl;
    test1.print_tree();
    std::cout << "---------------------------------------------------" << std::endl;

    cout << "Testing if rotatation are right when adding values..." << endl;
    cout << "Creating RedBlackTree<int> test2..." << endl;
    cout << "Inserting bunch of values" << endl;
    RedBlackTree <int> test2;
    test2.insert(76);
    test2.insert(19);
    test2.insert(30);
    test2.insert(58);
    test2.insert(65);
    test2.insert(92);
    test2.insert(23);
    test2.insert(31);
    test2.insert(33);
    test2.insert(84);
    test2.insert(21);
    test2.insert(81);
    test2.insert(96);
    test2.insert(24);
    test2.insert(6);
    test2.insert(52);
    test2.insert(13);
    test2.insert(79);
    test2.insert(45);
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 87" << endl;
    test2.insert(87);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 77" << endl;
    test2.insert(47);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 37" << endl;
    test2.insert(37);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 85" << endl;
    test2.insert(85);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 97" << endl;
    test2.insert(97);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 100" << endl;
    test2.insert(100);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 25" << endl;
    test2.insert(25);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 82" << endl;
    test2.insert(82);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 71" << endl;
    test2.insert(71);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 43" << endl;
    test2.insert(43);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();
    cout << "insert 36" << endl;
    test2.insert(36);
    std::cout << "---------------------------------------------------" << std::endl;
    std::cout << "printing tree" << endl;
    test2.print_tree();


    //copy constructor and assignment
    cout << "testing copy constructor and assignmenet operation" << endl;
    RedBlackTree <int> test4(test2);
    std::cout << "----------------copy------------------------" << std::endl;
    test4.print_tree();
    RedBlackTree <int> test5;
    test5 = test4;
    test5.insert(1000);
    std::cout << "----------------assignment------------------------" << std::endl;
    test5.print_tree();
     

    //big test
    cout << "Creating a big tree" << endl;
    RedBlackTree <int> big;
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(20);
    big.insert(5);
    big.insert(53);
    big.insert(58);
    big.insert(51);
    big.insert(3);
    big.insert(45);
    big.insert(130);
    big.insert(223);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    big.insert(201);
    big.insert(512);
    big.insert(543);
    big.insert(51);
    big.insert(8);
    big.insert(302);
    big.insert(450);
    big.insert(131);
    big.insert(222);
    big.insert(500);
    big.insert(50);
    big.insert(100);
    cout << "print big tree" << endl;
    big.print_tree();
    std::cout << "max of big tree: " << big.find_max() << std::endl;
    std::cout << "min of big tree: " << big.find_min() << std::endl;
    std::cout << "contain 50 for big tree: " << big.contains(50) << std::endl;
    std::cout << "contain 3829 for big tree: " << big.contains(3829) << std::endl;

    cout << endl;
}

//includes implementation of open addressing and separate chaining hashtables
void myHashtables()
{
    cout << "------------------Open Addressing Hashtable----------------- " << endl;
    cout << "Create HashTableOpenAddressing<int> table(11)" << endl;
    HashTableOpenAddressing<int> HashTableOpenAddressing1(11);
    cout << "print table" << endl;
    HashTableOpenAddressing1.print_table();
    HashTableOpenAddressing1.insert(5);
     HashTableOpenAddressing1.print_table();
     HashTableOpenAddressing1.insert(55);
     HashTableOpenAddressing1.print_table();
     HashTableOpenAddressing1.insert(56);
     HashTableOpenAddressing1.print_table();
     HashTableOpenAddressing1.insert(57);
     HashTableOpenAddressing1.print_table();
     cout << "Create HashTableOpenAddressing<std::string> table1(11)" << endl;
     HashTableOpenAddressing<std::string> openAddressingTable1(11);
     openAddressingTable1.insert("a");
     openAddressingTable1.insert("s");
     openAddressingTable1.insert("s");
     openAddressingTable1.insert("z");
     openAddressingTable1.insert("asd");
     openAddressingTable1.insert("desto");
     openAddressingTable1.insert("hope");
     openAddressingTable1.insert("hole");
     cout << "print table" << endl;
     openAddressingTable1.print_table();
    


    std::cout << "make an empty hash table with 11 buckets for strings" << std::endl;
    HashTableOpenAddressing<string> OpenAddressingTableString(11);

    std::cout << "initial size is " << OpenAddressingTableString.size() << std::endl;
    std::cout << "initial table size is " << OpenAddressingTableString.table_size() << std::endl;

    std::cout << "insert several strings" << std::endl;   
    OpenAddressingTableString.insert("And them who hold High Places");
    OpenAddressingTableString.insert("Must be the ones to start");
    OpenAddressingTableString.insert("To mold a new Reality");
    OpenAddressingTableString.insert("Closer to the Heart");
    OpenAddressingTableString.insert("The Blacksmith and the Artist");
    OpenAddressingTableString.insert("Reflect it in their Art");
    OpenAddressingTableString.insert("Forge their Creativity");
    OpenAddressingTableString.insert("Closer to the Heart");
    OpenAddressingTableString.insert("Philosophers and Plowmen");
    OpenAddressingTableString.insert("Each must know their Part");
OpenAddressingTableString.insert("To sow a new Mentality");
OpenAddressingTableString.insert("Closer to the Heart");
OpenAddressingTableString.insert("You can be the Captain");
OpenAddressingTableString.insert("I will draw the Chart");
OpenAddressingTableString.insert("Sailing into Destiny");
OpenAddressingTableString.insert("Closer to the Heart");

std::cout << "size is " << OpenAddressingTableString.size() << std::endl;
std::cout << "table size is " << OpenAddressingTableString.table_size() << std::endl;

{
  std::cout << "print the table" << std::endl;
  std::stringstream ss;
  OpenAddressingTableString.print_table(ss);
  std::cout << ss.str() << std::endl;
}

std::cout << "remove \"Philosophers and Plowmen\"" << std::endl;
OpenAddressingTableString.remove("Philosophers and Plowmen");
std::cout << "remove \"Each must know their Part\"" << std::endl;
OpenAddressingTableString.remove("Each must know their Part");

std::cout << "size is " << OpenAddressingTableString.size() << std::endl;
std::cout << "table size is " << OpenAddressingTableString.table_size() << std::endl;

{
  std::cout << "print the table" << std::endl;
  std::stringstream ss;
  OpenAddressingTableString.print_table(ss);
  std::cout << ss.str() << std::endl;
  std::cout << "LENGTH" << ss.str().length() << std::endl;
}

std::cout << "find \"The Blacksmith and the Artist\"" << std::endl;
size_t index = OpenAddressingTableString.position("The Blacksmith and the Artist");
std::cout << " ==> cell " << index << std::endl;

std::cout << "make the table empty" << std::endl;
OpenAddressingTableString.make_empty();

std::cout << "size is " << OpenAddressingTableString.size() << std::endl;
std::cout << "table size is " << OpenAddressingTableString.table_size() << std::endl;

{
  std::cout << "print the table" << std::endl;
  std::stringstream ss;
  OpenAddressingTableString.print_table(ss);
  std::cout << ss.str() << std::endl;
}

std::cout << "---------------------------------------------------" << std::endl;

    cout << "------------------Separate Chaining Hashtable------------------ " << endl;

    HashTableSeparateChaining<int> tabl(11);
    HashTableSeparateChaining<int> table2;
    tabl.insert(0);
    tabl.insert(1);
    tabl.insert(2);
    tabl.insert(3);
    tabl.insert(4);
    tabl.insert(5);
    tabl.insert(6);
    tabl.insert(11);
    tabl.insert(113);
    tabl.insert(14);
    tabl.print_table();
    tabl.insert(99);
    tabl.print_table();
    
    std::cout << "tester5 " <<  std::endl;
    std::cout << "contains 99: " << tabl.contains(99) << std::endl;
    std::cout << "contains 9123: " << tabl.contains(9123) << std::endl;
    std::cout << "1  " << tabl.bucket_count() << std::endl;
    std::cout << "2  " << tabl.bucket_size(9) << std::endl;
    std::cout << "3  " << tabl.bucket(99) << std::endl;
    tabl.remove(0);
    tabl.remove(7);
    tabl.remove(14);
    tabl.remove(9999999);
    std::cout << "contains 0 after remove: " << tabl.contains(0) << std::endl;
    std::cout << "contains 8: " << tabl.contains(8) << std::endl;
    std::cout << "-------removal---------" << std::endl;
    tabl.print_table();
    table2 = tabl;
    tabl.make_empty();
    std::cout << "-------make_empty---------" << std::endl;
    tabl.print_table();
    tabl.findNextPrime(304);
    table2.print_table();
    table2.max_load_factor(.5);
    table2.print_table();
    
     HashTableSeparateChaining<int> table3(11);
     table3.insert(5);
     table3.insert(52);
     table3.insert(21);
     table3.insert(89);
     table3.insert(1220);
     table3.insert(20);
     table3.print_table();
     cout << table3.bucket_size(1) << endl;
     cout << table3.bucket_size(4) << endl;
     cout << table3.bucket_size(10) << endl;
     cout << table3.bucket_size(9) << endl;
     table3.remove(20);
     cout << table3.bucket_size(9) << endl;
     cout << table3.max_load_factor() << endl;
     cout << table3.load_factor() << endl;
     table3.max_load_factor(.4);
     cout << table3.max_load_factor() << endl;
     cout << table3.load_factor() << endl;     

    std::cout << "make an empty hash table with 11 buckets for strings" << std::endl;
HashTableSeparateChaining<std::string> table(11);

std::cout << "initial size is " << table.size() << std::endl;
std::cout << "initial bucket count is " << table.bucket_count() << std::endl;
std::cout << "initial load factor is " << table.load_factor() << std::endl;
std::cout << "initial max load factor is " << table.max_load_factor() << std::endl;

std::cout << "insert several strings" << std::endl;   
table.insert("And them who hold High Places");
table.insert("Must be the ones to start");
table.insert("To mold a new Reality");
table.insert("Closer to the Heart");
table.insert("The Blacksmith and the Artist");
table.insert("Reflect it in their Art");
table.insert("Forge their Creativity");
table.insert("Closer to the Heart");
table.insert("Philosophers and Plowmen");
table.insert("Each must know their Part");
table.insert("To sow a new Mentality");
table.insert("Closer to the Heart");
table.insert("You can be the Captain");
table.insert("I will draw the Chart");
table.insert("Sailing into Destiny");
table.insert("Closer to the Heart");

std::cout << "size is " << table.size() << std::endl;
std::cout << "bucket count is " << table.bucket_count() << std::endl;
std::cout << "load factor is " << table.load_factor() << std::endl;
std::cout << "max load factor is " << table.max_load_factor() << std::endl;

{
  	std::cout << "print the table" << std::endl;
  	std::stringstream ss;
  	table.print_table(ss);
  	std::cout << ss.str() << std::endl;
}

std::cout << "remove \"Philosophers and Plowmen\"" << std::endl;
table.remove("Philosophers and Plowmen");
std::cout << "remove \"Each must know their Part\"" << std::endl;
table.remove("Each must know their Part");

std::cout << "size is " << table.size() << std::endl;
std::cout << "bucket count is " << table.bucket_count() << std::endl;
std::cout << "load factor is " << table.load_factor() << std::endl;
std::cout << "max load factor is " << table.max_load_factor() << std::endl;

{
  	std::cout << "print the table" << std::endl;
  	std::stringstream ss;
  	table.print_table(ss);
  	std::cout << ss.str() << std::endl;
}

std::cout << "set max load factor to 2" << std::endl;
table.max_load_factor(2);
std::cout << "rehash the table to size 7" << std::endl;
table.rehash(7);

std::cout << "size is " << table.size() << std::endl;
std::cout << "bucket count is " << table.bucket_count() << std::endl;
std::cout << "load factor is " << table.load_factor() << std::endl;
std::cout << "max load factor is " << table.max_load_factor() << std::endl;

{
  	std::cout << "print the table" << std::endl;
  	std::stringstream ss;
  	table.print_table(ss);
  	std::cout << ss.str() << std::endl;
}

std::cout << "find \"The Blacksmith and the Artist\"" << std::endl;
size_t index2 = table.bucket("The Blacksmith and the Artist");
std::cout << " ==> bucket " << index2 << std::endl;
std::cout << "     which has " << table.bucket_size(index2) << " elements" << std::endl;

std::cout << "make the table empty" << std::endl;
table.make_empty();

std::cout << "size is " << table.size() << std::endl;
std::cout << "bucket count is " << table.bucket_count() << std::endl;
std::cout << "load factor is " << table.load_factor() << std::endl;
std::cout << "max load factor is " << table.max_load_factor() << std::endl;

{
  	std::cout << "print the table" << std::endl;
  	std::stringstream ss;
  	table.print_table(ss);
  	std::cout << ss.str() << std::endl;
}

}

//includes dijkstras and prims minimum spanning tree algorithms
void myGraphs()    
{   
    //----------------TESTING FOR DIRECTED GRAPH W/ DIJKSTRAS----------------
    cout << "----------------Directed Graph + Dijkstras Implementation----------------" << endl;
    GraphDirected x;
    cout << "Create GraphDirected x" << endl;
    //test add vertex and edge
    x.add_vertex(0);
    x.add_vertex(1);
    x.add_vertex(2);
    x.add_vertex(3);
    x.add_vertex(4);
    x.add_vertex(5);
    x.add_vertex(6);
    x.add_vertex(7);
    x.add_vertex(8);
    x.add_vertex(5);
    cout << "Add Vertex 0, 1, 2, 3, 4, 5, 6, 7, 8, 5" << endl;
    x.add_edge(0,1,5);
    x.add_edge(5,9,3);
    x.add_edge(4,2,20);
    x.add_edge(8,4,2);
    cout << "Add Edge with (source, destination, weight): (0,1,5), (5,9,3), (4,2,20), (8,4,2)" << endl;
    cout << "x.displayMatrix(): " << endl;
    x.displayMatrix();
    cout << "x.displayVertex(): " << endl;
    x.displayVertex();
    std::cout << "Vertex count: " << x.vertex_count() << " Edge count: " << x.edge_count() << std::endl;
    std::cout << "Contains Vertex: " << x.contains_vertex(4) << " " << x.contains_vertex(55) << std::endl;
    std::cout << "Contains edge: " << x.contains_edge(8,4) << " " << x.contains_edge(5, 9) << std::endl;

    cout << "Create another GraphDirected, xs, give random values, then test assignment with xs = x" << endl;
    GraphDirected xs;
    xs.add_vertex(20);
    xs.add_vertex(3);
    xs.add_vertex(5);
    xs.remove_vertex(3);
    xs = x;
    cout << "xs.displayMatrix(): " << endl;
    xs.displayMatrix();
    cout << "xs.displayVertex(): " << endl;
    xs.displayVertex();

    std::cout << "-------------------------------------------" << std::endl;

    //test remove vertex and edge
    cout << "Remove vertex 22, 4, 8" << endl;
    x.remove_vertex(22);
    x.remove_vertex(4);
    x.remove_vertex(8);

    cout << "Remove edge (3,2), (0,1), (5,9), (8,4)" << endl;
    //x.remove_edge(0,1);
    x.remove_edge(3,2);
    x.remove_edge(0,1);
    x.remove_edge(5,9);
    x.remove_edge(8,4);

    cout << "DisplayMatrix()" << endl;
    x.displayMatrix();
    cout <<"displayVertex()" << endl;
    x.displayVertex();
    std::cout << "Vertex count: " << x.vertex_count() << " Edge count: " << x.edge_count() << std::endl;
    std::cout << "Contains Vertex: " << x.contains_vertex(4) << " " << x.contains_vertex(2) << std::endl;
    std::cout << "Contains edge: " << x.contains_edge(8,4) << " " << x.contains_edge(0, 1) << std::endl;

    std::cout << "-------------------------------------------" << std::endl;

    
    std::cout << "------------DIJKSTRA'S------------" << std::endl;
    cout << "Created GraphDirected d" << endl;
    GraphDirected d;
    cout << "add vertexs and edges..." << endl;
    d.add_vertex(0);
    d.add_vertex(1);
    d.add_vertex(2);
    d.add_vertex(3);
    d.add_vertex(4);
    d.add_vertex(5);
    d.add_vertex(6);
    d.add_edge(0,1,10);
    d.add_edge(0,5,5);
    d.add_edge(0,6,3);
    d.add_edge(1,6,1);
    d.add_edge(5,6,2);
    d.add_edge(6,3,20);
    d.add_edge(3,4,21);
    d.add_edge(3,2,2);
    std::cout << "-------------VERTEX LIST------------------" << std::endl;
    d.displayVertex();
    std::cout << "-------------MATRIX LIST------------------" << std::endl;
    d.displayMatrix();
    std::cout << "-------------SHORTEST DISTANCE LIST FROM VERTEX 0-------------------" << std::endl;
    d.dijkstra(0);
    d.displayShortestSet();
    std::cout << "-------------SHORTEST PATHS FROM VERTEX 0 LIST-------------------" << std::endl;
    for(int i = 0; i < d.numOfVertex; i++)
     {
         d.print_shortest_path(d.vertexList[i].id);
     }
    std::cout << "------------ANOTHER DIJKSTRA TEST------------" << std::endl;
    GraphDirected omg;
    cout << "Create graphm add bunch of vertex's and edges" << endl;
    omg.add_vertex(0);
    omg.add_vertex(1);
    omg.add_vertex(2);
    omg.add_vertex(3);
    omg.add_vertex(4);
    omg.add_vertex(5);
    omg.add_vertex(6);
    omg.add_vertex(69);

    omg.add_edge(0,1,4);
    omg.add_edge(1,2,55);
    omg.add_edge(0,6,7);
    omg.add_edge(0,5,1);
    omg.add_edge(5,4,1);
    omg.add_edge(4,3,10);
    omg.add_edge(4,6,1);
    omg.add_edge(0,4,10);
    omg.add_edge(6,2,20);
    omg.add_edge(1,3,3);
    omg.add_edge(3,2,65);
    omg.add_edge(1,6,3);
    std::cout << "-------------VERTEX LIST------------------" << std::endl;
    omg.displayVertex();
    std::cout << "-------------MATRIX LIST------------------" << std::endl;
    omg.displayMatrix();
    std::cout << "-------------SHORTEST DISTANCE LIST FROM VERTEX 0-------------------" << std::endl;
    omg.dijkstra(0);
    omg.displayShortestSet();
    cout << "------------SHORTEST PATHS FROM VERTEX 0 LIST---------------" << endl;
     for(int i = 0; i < omg.numOfVertex; i++)
     {
         omg.print_shortest_path(omg.vertexList[i].id);
     }

     //-------------TESTING FOR UNDIRECTED GRAPH W/ PRIMS---------------
     cout << endl;
     cout << "-----------------------Undirected Graph + Prims Implementation---------------------" << endl;
    cout << "Create undirected Graph, add bunch of vertex's and edges" << endl;
    GraphUndirected y;
    //test add vertex and edge
    y.add_vertex(0);
    y.add_vertex(1);
    y.add_vertex(2);
    y.add_vertex(3);
    y.add_vertex(4);
    y.add_vertex(5);
    y.add_vertex(6);
    y.add_vertex(7);
    y.add_vertex(8);
    y.add_vertex(5);

    y.add_edge(0,1,5);
    y.add_edge(5,9,3);
    y.add_edge(4,2,20);
    y.add_edge(8,4,2);
    cout << "displayMatrix()" << endl;
    y.displayMatrix();
    cout << "displayVertex()" << endl;
    y.displayVertex();

    std::cout << "Vertexcount: " << y.vertex_count() << " Edge count: " << y.edge_count() << std::endl;
    std::cout << "Contains Vertex: " << y.contains_vertex(4) << " " << y.contains_vertex(55) << std::endl;
    std::cout << "Contains edge: " << y.contains_edge(8,4) << " " << y.contains_edge(5, 9) << std::endl;

    cout << "Test assignment operation. Create undirectedgraph ys, add random values, then do ys = y" << endl;
    GraphUndirected ys;
    ys.add_vertex(20);
    ys.add_vertex(3);
    ys.add_vertex(5);
    ys.remove_vertex(3);
    ys = y;
    cout << "display ys to make sure it is same as y after assignment" << endl;
    ys.displayMatrix();


    std::cout << "-------------------------------------------" << std::endl;

    //test remove vertex and edge
    cout << "test remove vertex and edges" << endl;
    y.remove_vertex(22);
    y.remove_vertex(4);
    y.remove_vertex(8);
    cout << "remove vertex 22, 4, 8" << endl;
    y.remove_edge(3,2);
    y.remove_edge(5,9);
    y.remove_edge(8,4);
    cout << "remove edge (3,2),(5.9),(8,4)" << endl;
    cout << "displayMatrix() after removal" << endl;
    y.displayMatrix();
    cout << "displayVertex() after removal" << endl;
    y.displayVertex();
    std::cout << "Vertex count: " << y.vertex_count() << " Edge count: " << y.edge_count() << std::endl;
    std::cout << "Contains Vertex: " << y.contains_vertex(4) << " " << y.contains_vertex(2) << std::endl;
    std::cout << "Contains edge: " << y.contains_edge(8,4) << " " << y.contains_edge(0, 1) << std::endl;

    std::cout << "-------------------------------------------" << std::endl;

    cout << "TESTING PRIMS" << endl;
    cout << "create undirectedGraph G with vertex's 1->7 and 44" << endl;
    GraphUndirected G;
    for (size_t n = 1; n <= 7; n++) {
	    G.add_vertex(n);
    }
    G.add_vertex(44);

    cout << "add edges to graph G" << endl;
    G.add_edge(1,2,5);  
    G.add_edge(1,3,3);
    G.add_edge(2,3,2);  
    G.add_edge(2,5,3);
    G.add_edge(2,7,1);
    G.add_edge(3,4,7);
    G.add_edge(3,5,7);
    G.add_edge(4,1,2);
    G.add_edge(4,6,6);
    G.add_edge(5,4,2);
    G.add_edge(5,6,1);
    G.add_edge(7,5,1);

    cout << "Display matrix" << endl;
    G.displayMatrix();
    cout << "Display vertex" << endl;
    G.displayVertex();

    cout << "PRINT MINIMUM SPANNING TREE USING PRIMS ALGORITHM OF THE GRAPH G: " << endl;
   // std::list<std::pair<size_t,size_t>> hey = G.prim();
    G.prim();
    G.print_minimum_spanning_tree();

    std::cout << "G.distance(58): " << G.distance(58)  << std::endl;
    std::cout << "G.distance(1): " <<G.distance(1) << std::endl;
    std::cout << "G.distance(5): " <<G.distance(5) << std::endl;

    cout << endl;
}